
from django.shortcuts import render, get_object_or_404, redirect
from .models import Food
from django.core.paginator import Paginator
from .forms import Menuform
from django.http import HttpResponse

from django.shortcuts import render
from django.core.files.storage import FileSystemStorage

from django.shortcuts import render
from base64 import b64encode

#----------------------------------------------------

def Main(request):
    return render(request, 'main.html')


def Place(request):
    return render(request, 'place.html')


def Face(request):
    return render(request, 'face.html')


def Load(request):
    return render(request, 'load.html')


def Menu(request):
    return render(request, 'menu.html')
#     page = request.GET.get('page', '1')  # 페이지
#     food_list = List.objects.order_by('food_num')
#     # products = List.objects.filter(category='커피')
#     paginator = Paginator(food_list, 6)  # 페이지당 n개씩 보여주기
#     page_obj = paginator.get_page(page)
#     context = {'food_list':page_obj}
#     return render(request, 'menu.html', context)

# def Menu(request):
    # q = List.objects.values_list('category', flat=True).distinct()

    # page = request.GET.get('page', '1')  # 페이지

    # coffee_category = List.objects.filter(category='커피')
    # coffee_paginator = Paginator(coffee_category, 6)  # 페이지당 n개씩 보여주기
    # coffee_page_obj = coffee_paginator.get_page(page)

    # tea_category = List.objects.filter(category='차')
    # tea_paginator = Paginator(tea_category, 6)  # 페이지당 n개씩 보여주기
    # tea_page_obj = tea_paginator.get_page(page)

    # beverage_category = List.objects.filter(category='음료')
    # beverage_paginator = Paginator(beverage_category, 6)  # 페이지당 n개씩 보여주기
    # beverage_page_obj = beverage_paginator.get_page(page)

    # dessert_category = List.objects.filter(category='디저트')
    # dessert_paginator = Paginator(dessert_category, 6)  # 페이지당 n개씩 보여주기
    # dessert_page_obj = dessert_paginator.get_page(page)

    # food_list = List.objects.order_by('food_num')
    # paginator = Paginator(food_list, 6)  # 페이지당 n개씩 보여주기
    # page_obj = paginator.get_page(page)

    # context = {
    #     'coffee_category':coffee_page_obj,
    #     'tea_category':tea_page_obj,
    #     'beverage_category':beverage_page_obj,
    #     'dessert_category':dessert_page_obj,
    #     'q':q,
    #     # 'food_list':page_obj
    #     }
    # return render(request, 'menu.html', context)




# MenuList 관련 View ------------------------------



def MenuList(request):
    # food_list = Food.objects.order_by('id')
    # context = {'food_list':food_list}
    return render(request, 'menulist.html')


def food_detail(request, food_id):
    # food = get_object_or_404(Food, pk=food_id)
    # context = {'food': food}
    return render(request, 'food_detail.html')



def add_menulist(request):
    if request.method == 'POST':
        form = Menuform(request.POST, request.FILES)
        if form.is_valid():
            food_name = request.POST['food_name']
            price = request.POST['price'] 
            food_explain = request.POST['food_explain']
            category = request.POST['category']
            file = request.FILES['image'] 

            data = file.read()

            fs = FileSystemStorage()    # 순서 주의 
            filename = fs.save(file.name, file)
            uploaded_file_url = fs.url(filename)

            encoded = b64encode(data).decode()
            mime = 'media;'

            context = {"image": "data:%sbase64,%s" % (mime, encoded),
                        'uploaded_file_url': uploaded_file_url,
                        'food_name': food_name,
                        'price':price,
                        'food_explain': food_explain,
                        'category':category
                        }
                        
            return render(request, 'menulist.html', context)
    else:
        form = Menuform()
    context = {'form': form}
    return render(request, 'menu_form.html', context)




# ---------------------------------------------------------------

# ---------------------------------------------------------------
from django.http import JsonResponse    # json 파일 만들기 시도
from django.core import serializers
import json

# def test(request):
    
    
    # data_to_json={}
    # data_to_json = simplejson.dumps(form.__dict__)
    # return HttpResponse(data_to_json, mimetype='static/json')

    ## txt파일용
    # data_file = open('static/txt/food_file.txt', encoding='utf-8')
    # data = data_file.read()
    # context = {'food_list': data}

    # 쿼리 다루기
    # q = Food.objects.values_list('category', flat=True).distinct()
    # q_dict = {
    #     'q':q,
    # }

    # q_category = List.objects.filter(category=)
    # context = q_dict
    # filter = List.objects.filter(category=q)
    # return render(request, 'test.html', context)
    # return HttpResponse()




# def test(request):
#     if request.method == 'POST':

#         form = Menuform(request.POST, request.FILES)
#         if form.is_valid():

#             food_name = request.POST['food_name']
#             price = request.POST['price'] 
#             food_explain = request.POST['food_explain']
#             category = request.POST['category']

#             file = request.FILES['image']
#             data = file.read()
#             # Calling .decode() converts bytes object to str

#             fs = FileSystemStorage()    # 순서 주의 
#             filename = fs.save(file.name, file)
#             uploaded_file_url = fs.url(filename)

#             encoded = b64encode(data).decode()
#             mime = 'media;'

#             context = {"image": "data:%sbase64,%s" % (mime, encoded),
#                         'uploaded_file_url': uploaded_file_url,
#                         'food_name': food_name,
#                         'price':price,
#                         'food_explain': food_explain,
#                         'category':category
#                         }
#             return render(request, 'test.html', context)
#     else:
#         form = Menuform()
#     return render(request, 'test.html', {'form': form})


def test(request):
    if request.method == 'POST':
        fs = FileSystemStorage()
        form = Menuform(request.POST, request.FILES)
        if form.is_valid():

            food_name = request.POST['food_name']
            price = request.POST['price'] 
            food_explain = request.POST['food_explain']
            category = request.POST['category']

            file = request.FILES['image']
            data = file.read()
            # Calling .decode() converts bytes object to str

                # 순서 주의 
            fs.save(file.name, file)
            # uploaded_file_url = fs.url(filename)

            encoded = b64encode(data).decode()
            mime = 'media;'

            context = {"image": "data:%sbase64,%s" % (mime, encoded),
                        'food_name': food_name,
                        'price':price,
                        'food_explain': food_explain,
                        'category':category
                        }
            return render(request, 'test.html', context)
    else:
        form = Menuform()
    return render(request, 'test.html', {'form': form})