# from django.views.generic.base import TemplateView
#
# class Main(TemplateView):
#     template_name = 'main.html'

from django.shortcuts import render, get_object_or_404, redirect
from django.utils import timezone
from .models import List
from django.core.paginator import Paginator
from django.db.models import Q
# from .forms import Menuform
from django.http import HttpResponse

def Main(request):
    return render(request, 'main.html')


def Place(request):
    return render(request, 'place.html')


def Face(request):
    return render(request, 'face.html')


def Load(request):
    return render(request, 'load.html')


# def Menu(request):
#     page = request.GET.get('page', '1')  # 페이지
#     food_list = List.objects.order_by('food_num')
#     # products = List.objects.filter(category='커피')
#     paginator = Paginator(food_list, 6)  # 페이지당 n개씩 보여주기
#     page_obj = paginator.get_page(page)
#     context = {'food_list':page_obj}
#     return render(request, 'menu.html', context)

def Menu(request):
    q = List.objects.values_list('category', flat=True).distinct()

    page = request.GET.get('page', '1')  # 페이지

    coffee_category = List.objects.filter(category='커피')
    coffee_paginator = Paginator(coffee_category, 6)  # 페이지당 n개씩 보여주기
    coffee_page_obj = coffee_paginator.get_page(page)

    tea_category = List.objects.filter(category='차')
    tea_paginator = Paginator(tea_category, 6)  # 페이지당 n개씩 보여주기
    tea_page_obj = tea_paginator.get_page(page)

    beverage_category = List.objects.filter(category='음료')
    beverage_paginator = Paginator(beverage_category, 6)  # 페이지당 n개씩 보여주기
    beverage_page_obj = beverage_paginator.get_page(page)

    dessert_category = List.objects.filter(category='디저트')
    dessert_paginator = Paginator(dessert_category, 6)  # 페이지당 n개씩 보여주기
    dessert_page_obj = dessert_paginator.get_page(page)

    # food_list = List.objects.order_by('food_num')
    # paginator = Paginator(food_list, 6)  # 페이지당 n개씩 보여주기
    # page_obj = paginator.get_page(page)

    context = {
        'coffee_category':coffee_page_obj,
        'tea_category':tea_page_obj,
        'beverage_category':beverage_page_obj,
        'dessert_category':dessert_page_obj,
        'q':q,
        # 'food_list':page_obj
        }
    return render(request, 'menu.html', context)


# def Category(request):
#     q = List.objects.values_list('category', flat=True).distinct()
#     q_dict = {
#         'q':q
#     }
#     # context = q_dict
#     # filter = List.objects.filter(category=q)
#     return render(request, 'test.html', q_dict)
#     # return HttpResponse(context)


# from django.contrib import admin

# class MyAdmin(admin.ModelAdmin):
#     list_filter = ('category',)
#     _list_filter = list_filter

#     def changelist_view(self, request, extra_context=None):    
#         if not request.user.is_superuser:
#             self.list_filter = None
#         else:
#             self.list_filter = self._list_filter
#         return super(MyAdmin, self).changelist_view(request, extra_context)


def Order(request):
    return render(request, 'order.html')


def Kitchen(request):
    return render(request, 'kitchen.html')


def Favorlist(request):
    return render(request, 'favor.html')




# MenuList 관련 View ------------------------------

def MenuList(request):
    food_list = List.objects.order_by('food_num')
    context = {'food_list':food_list}
    return render(request, 'menulist.html', context)


def food_detail(request, food_id):
    food = get_object_or_404(List, pk=food_id)
    context = {'food': food}
    return render(request, 'food_detail.html', context)




# def add_menulist(request):
#     if request.method == 'POST':
#         form = Menuform(request.POST)
#         if form.is_valid():
#             food = form.save(commit=False)
#             food.save()
#             return redirect('kiosk:menulist')
#     else:
#         form = Menuform()
#     context = {'form': form}
#     return render(request, 'menu_form.html', context)



def Category_test(request, word):
    food_category = List.objects.filter(category=word).values()
    # context = {'food_category':food_category}
    # return render(request, 'menu.html', context)
    return HttpResponse(food_category)
    # return HttpResponse(context)

def test(request):
    q = List.objects.values_list('category', flat=True).distinct()
    q_dict = {
        'q':q,
    }

    # q_category = List.objects.filter(category=)
    # context = q_dict
    # filter = List.objects.filter(category=q)
    # return render(request, 'test.html', q_dict)
    return HttpResponse(q_dict)


# def food_detail(request, food_id):
#     food = get_object_or_404(List, pk=food_id)
#     context = {'food': food}
#     return render(request, 'food_detail.html', context)